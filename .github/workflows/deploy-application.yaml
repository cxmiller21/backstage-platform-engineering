  # name: Build and Push Backstage Application Image to AWS ECR

  # on:
  #   push:
  #     paths-ignore:
  #       - README.md
  #       - .gitignore

  # jobs:
  #   terraform-ecr:
  #     name: Deploy ECR Repository
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3

  #       - name: Deploy ECR Repository
  #         id: deploy-ecr-repo
  #         uses: ./.github/actions/terraform
  #         with:
  #           working_dir: "./.terraform/ecr"
  #           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   application:
  #     name: Build and Publish Application to ECR
  #     needs:
  #       - terraform-ecr
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3

  #       - name: Unit Tests
  #         run: docker build --target test .

  #       - name: Configure AWS Credentials
  #         uses: aws-actions/configure-aws-credentials@v2
  #         with:
  #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #           aws-region: us-east-1

  #       - name: Login to Amazon ECR
  #         id: login-ecr
  #         # https://github.com/aws-actions/amazon-ecr-login
  #         uses: aws-actions/amazon-ecr-login@v1

  #       - name: Set Tag Environment Variable
  #         id: set-environment-variable
  #         run: |
  #           echo "GITHUB_REF: ${{ github.ref }}"
  #           if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
  #             echo "Setting Environment to prod"
  #             echo "ENVIRONMENT=prod" >> $GITHUB_ENV
  #           else
  #             echo "Setting Environment to dev"
  #             echo "ENVIRONMENT=dev" >> $GITHUB_ENV
  #           fi

  #       - name: Build, tag, and push docker image to Amazon ECR
  #         env:
  #           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #           REPOSITORY: "caddy-${{ env.ENVIRONMENT }}-ecr-repository"
  #           IMAGE_TAG: "latest"
  #         run: |
  #           docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --no-cache .
  #           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  #   terraform-main:
  #     name: Deploy AWS Resources
  #     runs-on: ubuntu-latest
  #     needs:
  #       - terraform-ecr
  #       - application
  #     steps:
  #       - uses: actions/checkout@v3

  #       - name: Deploy AWS Resources
  #         id: deploy-ecr-repo
  #         uses: ./.github/actions/terraform
  #         with:
  #           working_dir: "./terraform/main"
  #           tf_vars: "-var slack_signing_secret='${{ secrets.SLACK_SIGNING_SECRET }}' -var slack_api_token='${{ secrets.SLACK_API_TOKEN }}'"
  #           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   deploy-app-runner:
  #     name: Deploy Image in App Runner
  #     needs:
  #       - terraform-ecr
  #       - application
  #       - terraform-main
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3

  #       - name: Configure AWS Credentials
  #         uses: aws-actions/configure-aws-credentials@v2
  #         with:
  #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #           aws-region: us-east-1

  #       - name: Set Tag Environment Variable
  #         id: set-environment-variable
  #         run: |
  #           echo "GITHUB_REF: ${{ github.ref }}"
  #           if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
  #             echo "Setting Environment to prod"
  #             echo "ENVIRONMENT=prod" >> $GITHUB_ENV
  #           else
  #             echo "Setting Environment to dev"
  #             echo "ENVIRONMENT=dev" >> $GITHUB_ENV
  #           fi

  #       - name: Deploy Image in App Runner
  #         env:
  #           SERVICE_NAME: "caddy-${{ env.ENVIRONMENT }}-apprunner-service"
  #         run: |
  #           pip3 install boto3
  #           python3 ./scripts/deploy_app_runner.py --service-name $SERVICE_NAME
